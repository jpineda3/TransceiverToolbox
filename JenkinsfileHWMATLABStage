// Pipeline
lock(label: 'adgt_test_harness_boards'){
    @Library('jp-lib@master') _ // Not necessary when we turn on global libraries :)
    def dependencies = ["nebula","libiio","libiio-py"]
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "release"
    def firmwareVersion = 'v0.32'
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(dependencies, hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)
    
    //udpate repos
    harness.set_env('nebula_repo','https://github.com/sdgtt/nebula.git')
    harness.set_env('nebula_branch','dev')
    harness.set_env('libiio_branch','v0.21')
    harness.set_env('telemetry_repo','https://github.com/tfcollins/telemetry.git')
    harness.set_env('telemetry_branch','master')
    harness.set_env('matlab_repo','https://github.com/jpineda3/TransceiverToolbox.git')
    harness.set_env('matlab_branch','hw-test')
    
    //update first the agent with the required deps
    harness.update_agents()
    
    //update nebula config
    def jobs = [:]
    for (agent in harness.gauntEnv.agents_online) {
        println('Agent: ' + agent)
        def agent_name = agent
        jobs[agent_name] = {
            node(agent_name) {
                stage('Update Nebula Config') {
                    sh 'if [ -d "nebula-config" ]; then rm -Rf nebula-config; fi'
                    sh 'git clone -b master https://github.com/sdgtt/nebula-config.git'
                    cmd = 'sudo mv nebula-config/' + agent_name + ' /etc/default/nebula'
                    sh cmd
                }
            }
        }
    }
    
    stage('Configure Agents') {
        parallel jobs
    }
    
    
    //set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(false)
    harness.set_elastic_server('192.168.10.1')
    harness.set_required_hardware(["zynq-zed-adv7511-ad9361-fmcomms2-3"])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")

harness.add_stage(harness.stage_library("MATLABTests"),'continueWhenFail')

//harness.add_stage(harness.stage_library("SendResults"))


// Go go
harness.run_stages()
} 